AWSTemplateFormatVersion: '2010-09-09'
Description: Resources for step functions workshop
Globals:
  Function:
    Runtime: nodejs8.10
Outputs:
  DDBAlbumMetadataTable:
    Value:
      Ref: AlbumMetadataDDBTable
  DDBImageMetadataTable:
    Value:
      Ref: ImageMetadataDDBTable
  DescribeExecutionFunction:
    Value:
      Ref: DescribeExecutionFunction
  ExtractMetadataLambda:
    Value:
      Fn::GetAtt:
      - ExtractImageMetadataFunction
      - Arn
  PhotoRepoS3Bucket:
    Value:
      Ref: PhotoRepoS3Bucket
  RekognitionLambda:
    Value:
      Fn::GetAtt:
      - DetectLabelRekognitionFunction
      - Arn
  StoreImageMetadataFunction:
    Value:
      Fn::GetAtt:
      - StoreImageMetadataFunction
      - Arn
  ThumbnailLambda:
    Value:
      Fn::GetAtt:
      - GenerateThumbnailFunction
      - Arn
Parameters:
  TestImagesBucket:
    Default: sfn-image-proc-workshop-us-west-2
    Description: S3 bucket containing the test images to copy over
    Type: String
  TestImagesPrefix:
    Default: tests/
    Description: Key prefix for test images to copy over
    Type: String
Resources:
  AlbumMetadataDDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: creationTime
        AttributeType: N
      - AttributeName: userID
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: userID-creationTime-index
        KeySchema:
        - AttributeName: userID
          KeyType: HASH
        - AttributeName: creationTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '1'
      KeySchema:
      - AttributeName: albumID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '2'
        WriteCapacityUnits: '1'
    Type: AWS::DynamoDB::Table
  CopyS3ObjectsFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/dea600b517ef594f0174657e93322229
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Policies:
        Statement:
        - Action:
          - s3:ListBucket
          - s3:GetObject
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:s3:::${TestImagesBucket}
          - Fn::Sub: arn:aws:s3:::${TestImagesBucket}/${TestImagesPrefix}*
          Sid: SourceBucketReadAccess
        - Action:
          - s3:ListBucket
          - s3:ListBucketVersions
          - s3:GetBucketVersioning
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:PutObjectVersionAcl
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:CopyObject
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}
          - Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: DestBucketWriteAccess
      Runtime: python2.7
      Timeout: 120
    Type: AWS::Serverless::Function
  DescribeExecutionFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/5e210ce4456fdd98920fd72dcf095337
      Description: Calls DescribeExecution on a state machine execution.
      Handler: index.handler
      MemorySize: 1024
      Policies:
        Statement:
        - Action:
          - states:DescribeExecution
          Effect: Allow
          Resource: '*'
          Sid: DescribeStepFunction
      Timeout: 200
    Type: AWS::Serverless::Function
  DetectLabelRekognitionFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/81c19920a54eb208c89be1c97a0a65bf
      Description: Use Amazon Rekognition to detect labels from image
      FunctionName:
        Fn::Sub: ${AWS::StackName}-DetectLabel
      Handler: index.handler
      MemorySize: 256
      Policies:
        Statement:
        - Action:
          - rekognition:DetectLabels
          Effect: Allow
          Resource:
          - '*'
        - Action:
          - s3:Get*
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
      Timeout: 300
    Type: AWS::Serverless::Function
  EmptyPhotoRepoS3Bucket:
    Properties:
      Bucket:
        Ref: PhotoRepoS3Bucket
      ServiceToken:
        Fn::GetAtt:
        - CopyS3ObjectsFunction
        - Arn
    Type: Custom::S3Objects
  ExtractImageMetadataFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/3842e2947b8dd08e7e61d80cf77043fc
      Description: Extract image metadata such as format, size, geolocation, etc.
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExtractMetadata
      Handler: index.handler
      MemorySize: 512
      Policies:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: ReadFromS3Bucket
      Timeout: 200
    Type: AWS::Serverless::Function
  GenerateThumbnailFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/6d8c944c1cbdece8ba25b241a2966c00
      Description: Generate thumbnails for images
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Thumbnail
      Handler: index.handler
      MemorySize: 1536
      Policies:
        Statement:
        - Action:
          - s3:PutObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: WritetoS3Bucket
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: ReadFromS3
      Timeout: 300
    Type: AWS::Serverless::Function
  ImageMetadataDDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: imageID
        AttributeType: S
      - AttributeName: uploadTime
        AttributeType: N
      GlobalSecondaryIndexes:
      - IndexName: albumID-uploadTime-index
        KeySchema:
        - AttributeName: albumID
          KeyType: HASH
        - AttributeName: uploadTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '3'
          WriteCapacityUnits: '3'
      KeySchema:
      - AttributeName: imageID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
    Type: AWS::DynamoDB::Table
  PhotoRepoS3Bucket:
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          - GET
          - POST
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
    Type: AWS::S3::Bucket
  PopulateTestImages:
    Properties:
      Bucket:
        Ref: PhotoRepoS3Bucket
      Prefix:
        Fn::Sub: ${TestImagesPrefix}
      ServiceToken:
        Fn::GetAtt:
        - CopyS3ObjectsFunction
        - Arn
      SourceBucket:
        Ref: TestImagesBucket
      SourcePrefix:
        Fn::Sub: ${TestImagesPrefix}
    Type: Custom::S3Objects
  StartExecution:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/cc5939cfa1e5ee4263f8d377d52a2d1b
      Description: Starts the execution of the state machine
      Environment:
        Variables:
          IMAGE_METADATA_DDB_TABLE:
            Ref: ImageMetadataDDBTable
          STATE_MACHINE_ARN: FILL_WITH_YOUR_VALUE
      FunctionName:
        Fn::Sub: ${AWS::StackName}-StartExecution
      Handler: index.handler
      Policies:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: GetObjectFromS3
        - Action:
          - states:StartExecution
          Effect: Allow
          Resource: '*'
          Sid: ExecuteStateMachine
        - Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}
          Sid: WriteToImageMetadataDDBTable
      Timeout: 30
    Type: AWS::Serverless::Function
  StoreImageMetadataFunction:
    Properties:
      CodeUri: s3://image-processing-step-functions-workshop-us-east-1/packaged-lambda/5db5d5786237e36874592d005e4f84eb
      Description: Store image metadata into database
      Environment:
        Variables:
          ALBUM_METADATA_DDB_TABLE:
            Ref: AlbumMetadataDDBTable
          IMAGE_METADATA_DDB_TABLE:
            Ref: ImageMetadataDDBTable
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PersistDDB
      Handler: index.handler
      MemorySize: 256
      Policies:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
          Sid: ReadFromS3
        - Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}
          - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}
          Sid: WriteToImageMetadataDDBTable
      Timeout: 60
    Type: AWS::Serverless::Function
  TestClientIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          - sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
            Sid: S3ReadWrite
          Version: '2012-10-17'
        PolicyName: S3PhotoRepoBucketAccess
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}/*
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}/*
            Sid: DynamoTableAccess
          Version: '2012-10-17'
        PolicyName: DynamoTableAccess
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}
            Sid: InvokeDescribeExecutionLambda
          Version: '2012-10-17'
        PolicyName: InvokeDescribeExecutionLambda
    Type: AWS::IAM::Role
  TestClientIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: TestWebApp
    Type: AWS::Cognito::IdentityPool
  TestClientIdentityPoolRoles:
    Properties:
      IdentityPoolId:
        Ref: TestClientIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - TestClientIAMRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - TestClientIAMRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
Transform: AWS::Serverless-2016-10-31
